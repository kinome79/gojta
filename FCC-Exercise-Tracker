const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

const cors = require('cors');
require('dotenv').config();

app.use(cors());
app.use(express.static('public'));
app.use(bodyParser.urlencoded({extended: false}));

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html')
});

mongoose.connect(process.env.MONGO_URI, {useNewUrlParser: true, useUnifiedTopology: true});

const exerUserSchema = new mongoose.Schema({
  username: {type: String, required: true}, 
  exerLog: [{description: {type: String},
            duration: {type: Number},
            date: {type: Date}}]
});

const ExerUser = new mongoose.model("ExerUser", exerUserSchema);

//Add a new user
const addUser = function(username, done) {
  //createa a new exerUser, return the username and new _id
  const newUser = new ExerUser({username: username});
  newUser.save((err,data) => {
    if (err) {return done(err)};
    done(null, data)
  })
}

//Get a list of users
const getUsers = function(done) {
  //return a JSON with all users 
  ExerUser.find({}, (err,data) => {
    if (err) {return done(err)};
    done(null, data);
  })
}

//Add an exercise log to a user
const addExercise = function (exerData, done) {
  //add new exercise to a particular exerUser
  exerData.date = new Date(exerData.date);
  if (exerData.date == "Invalid Date") { 
    exerData.date = new Date();}

  const newExer = {description: exerData.description, 
                   duration: exerData.duration, 
                   date: exerData.date};

  ExerUser.findOneAndUpdate ({_id: exerData._id}, 
                             {$push: {exerLog: newExer}}, 
                             {new: true}, 
                             (err, data) => {
    if (err) {return done(err)};
    done(null, data); 
  })
}

//Get a users exercise logs
const getExercise = function (userData, done) {
  //fetch requested exercise data
  ExerUser.findById(userData._id, (err, data) => {
    if(err){return done(err)};
    done(null, data)
  })
}

//Remove a user from database
const removeUser = function (userID, done) {
  //Remove User
  ExerUser.findByIdAndRemove(userID, (err,data) => {
    if(err){done(err)};
    done(null,data);
  })
}

//***FIND EXERCISE LOGS
app.get('/api/users/:_id/logs', function (req,res) {
  //Return a json list of all of a users exercises
  const filters = req.query;
  let search = {_id: req.params._id,
                from: filters.hasOwnProperty("from")?filters.from:null,
                to: filters.hasOwnProperty("to")?filters.to:null,
                limit: filters.hasOwnProperty("limit")?filters.limit:null};
  getExercise (search, (err,user) => {
    if (err) {return console.log("Error Has Occurred: " + err)};

    let filterArray = user.exerLog;

    if (search.from != null){
      filterArray = filterArray.filter ( (item) => item.date >= new Date(search.from));
    }
    
    if (search.to != null){
      filterArray = filterArray.filter ( (item) => item.date <= new Date(search.to));
    }
    
    if (search.limit != null){
      filterArray = filterArray.slice(0, search.limit)
    }
    
    
    res.json({username: user.username,
              _id: user._id, 
              count: user.exerLog.length,
              log: filterArray.map(item => { return {
                  description: item.description,
                  duration: parseInt(item.duration),
                  date: item.date.toDateString()}})             
  });
  })
});

//***FIND USERS
app.get('/api/users', function (req,res) {
  //Return a json list of all users
  getUsers((err, users) => {
    if (err) {
      return console.log("Error Has Occurred: " + err)
    }
    res.json(users.map((item) => {return {username: item.username, _id: item._id}}))
  })
});

//***POST USERS
app.post('/api/users', function (req,res) {
  //Create a new user and return username and _id
  addUser(req.body.username, (err,newUser) => {
    if (err) {
      return console.log ("Error Has Occurred: " + err);
    }
    res.json({username: req.body.username, _id: newUser._id});
  });
});

//***POST EXERCISE LOGS
app.post('/api/users/:_id/exercises', function (req,res) {
  //Add an exersize entry and return user object with exercise added
  addExercise ({_id: req.params._id, description: req.body.description,
               duration: req.body.duration, date: req.body.date}, (err,user)=> {
    if(err) {return console.log("Error Has Occurred: " + err)};
    const newLog = user.exerLog[user.exerLog.length - 1];
    res.json({username: user.username,
              _id: user._id, 
              description: newLog.description,
              duration: parseInt(newLog.duration),
              date: newLog.date.toDateString()});             
  });
});

//***REMOVE A USERS - NOT REQUIRED BUT FOR TROUBLESHOOTING
app.get('/api/users/:_id/remove', function(req,res) {
  removeUser (req.params._id, (err,user) => {
    if(err){return console.log("Error Has Occurred: " + err)};
    res.send("User " + user.username + " has been removed!")
  })
})


const listener = app.listen(process.env.PORT || 3000, () => {
  console.log('Your app is listening on port ' + listener.address().port)
})
