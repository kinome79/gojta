

api.js
--------------------------------------------------------------------------------------------------
/*
*
*
*       Complete the API routing below
*       
*       
*/
'use strict';
const { send } = require('express/lib/response');
const DB = require('../db-connections');

module.exports = function (app) {

  app.route('/api/books')
    .get(function (req, res){
      //response will be array of book objects
      //json res format: [{"_id": bookid, "title": book_title, "commentcount": num_of_comments },...]

      //Call GETbooks function from db-connections, and JSON the response or send error
      DB.GETbooks( (err, data) => {
        if (err) {return res.send(err)}
        res.json(data);
      });
    })
    
    .post(function (req, res){
      let title = req.body.title;
      //response will contain new book object including atleast _id and title

      
      //Call POSTbook function from db-connections, and JSON the response or send error
      DB.POSTBook(title, (err, data) => {
        if (err) {return res.send(err)}
        res.json(data);
      });
    })
    
    .delete(function(req, res){
      //if successful response will be 'complete delete successful'

      
      //Call DELETEbooks function from db-connections, and send the response or error
      DB.DELETEbooks((err, response) => {
        if (err) {return res.send(err)}
        res.send(response);
      });
    });



  app.route('/api/books/:id')
    .get(function (req, res){
      let bookid = req.params.id;
      //json res format: {"_id": bookid, "title": book_title, "comments": [comment,comment,...]}

      
      //Call GETbook function from db-connections, and JSON the response or send error
      DB.GETbook(bookid, (err, data) => {
        if (err) {return res.send(err)}
        res.json(data);
      })
    })
    
    .post(function(req, res){
      let bookid = req.params.id;
      let comment = req.body.comment;
      //json res format same as .get

      
      //Call POSTComment function from db-connections, and JSON the response or send error
      DB.POSTComment(bookid, comment, (err,data) => {
        if (err) {return res.send(err)}
        res.json(data);
      });
    })
    
    .delete(function(req, res){
      let bookid = req.params.id;
      //if successful response will be 'delete successful'

      
      //Call DELETEbook function from db-connections, and send the response or error
      DB.DELETEbook(bookid, (err, response) => {
        if (err){res.send(err)}
        res.send(response);
      });
    });
  
};









db-connections.js   
//All database actions stored in this module
--------------------------------------------------------------------------------------------------
'use strict'

const { stringify } = require("mocha/lib/utils");

const mongoose = require('mongoose');
const ObjectID = require('mongoose').Types.ObjectId;
const {Schema} = mongoose;

//connect to Mongo DB with mongoose
mongoose.connect(process.env.DB, {useNewUrlParser: true, useUnifiedTopology: true}).then(() => {
    console.log('Mongo Database Connected!!!');
}).catch(err => {
    console.log('Failed to connect to Mongo Database!!!')
});

//configure Schemas for Book and Comment for Database
const commentSchema = new Schema({
    comment: {type: String, required: true}
});

const bookSchema = new Schema({
    title: {type: String, required: true}, 
    comments: {type: [commentSchema], default: []}
});

//Create Book model for creating and querying Books
const Book = mongoose.model('Book', bookSchema);

//---Add a book through POST request ----------------------- 
function handlePOSTBook (title, done) {
    //If title exists, create new book, otherwise respond error
    if (title) {
        Book.create({title: title}, (err, data) => {
            if(err){return done(err)}
            done(null, {title: data.title, _id: data._id});
        });
    } else {
        return done ("missing required field title");
    }
}

//---Add a comment through POST request --------------------------------------------------------
function handlePOSTComment (_id, comment, done) {
    //If comment exists, attempt to add comment, otherwise respond error
    if (comment) {
        //Check if the ID is valid, and if so, find book and push comment
        if (!ObjectID.isValid(_id)) {return done("no book exists")}
        Book.findByIdAndUpdate(_id, { $push: {comments: {comment: comment}}}, {new:true}, (err,book) => {
            if(err){return done(err)}

            //If book found and updated, respond with appropriate object, otherwise error message
            if (book) {
                done (null, {title: book.title, _id: book._id, comments: book.comments.map(comment => comment.comment)});
            } else {
                done("no book exists");
            }
        });      
    } else {
        done("missing required field comment");
    }
}

//---Get all books through GET request --------------------------------------------------------
function handleGETbooks (done) {
    //Find all books and respond with appropriately formatted object
    Book.find({}, (err, books) => {
        if(err){return done(err)}
        done(null, books.map(book => { 
            return {title: book.title, _id: book._id, commentcount: book.comments.length}
        }));
    });
}

//---Get a book through GET request ---------------------------------------- 
function handleGETbook (_id, done) {
    //Verify _id is a valid ID format, and then find the book
    if (!ObjectID.isValid(_id)) {return done("no book exists")}
    Book.findById(_id, (err, book) => {
        if(err){return done(err)}

        //If book found, respond with appropriate object, otherwise error
        if (book) {
            done (null, {title: book.title, _id: book._id, comments: book.comments.map(comment => comment.comment)});
        } else {
            done("no book exists");
        }
    });
}

//---Delete a book through DELETE request ---------------------------------
function handleDELETEbook (_id, done) {
    //Verify _id is a valid ID format, and then find/delete the book
    if (!ObjectID.isValid(_id)) {return done("no book exists")}
    Book.findByIdAndDelete (_id, (err, book) => {
        if (err) {return done(err)}

        //If book deleted, send complete message, otherwise error
        if (book) {
            done (null, "delete successful");
        } else {
            done ("no book exists");
        }
    });
}

//---Delete all books through DELETE request ------------------------------- 
function handleDELETEbooks (done) {
    //Use Delete Many to delete all books
    Book.deleteMany ({}, (err,data) => {
        if (err) {return done(err)}
        done (null, "complete delete successful");
    });
}

module.exports.POSTBook = handlePOSTBook;
module.exports.POSTComment = handlePOSTComment;
module.exports.GETbooks = handleGETbooks;
module.exports.GETbook = handleGETbook;
module.exports.DELETEbook = handleDELETEbook;
module.exports.DELETEbooks = handleDELETEbooks;










2_functional-test.js
--------------------------------------------------------------------------------------------------
/*
*
*
*       FILL IN EACH FUNCTIONAL TEST BELOW COMPLETELY
*       -----[Keep the tests in the same order!]-----
*       
*/

const chaiHttp = require('chai-http');
const chai = require('chai');
const assert = chai.assert;
const server = require('../server');
const { request } = require('chai');

chai.use(chaiHttp);

suite('Functional Tests', function() {

  /*
  * ----[EXAMPLE TEST]----
  * Each test should completely test the response of the API end-point including response status code!
  */
  test('#example Test GET /api/books', function(done){
     chai.request(server)
      .get('/api/books')
      .end(function(err, res){
        assert.equal(res.status, 200);
        assert.isArray(res.body, 'response should be an array');
        assert.property(res.body[0], 'commentcount', 'Books in array should contain commentcount');
        assert.property(res.body[0], 'title', 'Books in array should contain title');
        assert.property(res.body[0], '_id', 'Books in array should contain _id');
        done();
      });
  });
  /*
  * ----[END of EXAMPLE TEST]----
  */

  suite('Routing tests', function() {
    let test_id;

    suite('POST /api/books with title => create book object/expect book object', function() {
      
      test('Test POST /api/books with title', function(done) {
        chai.request(server)
        .post('/api/books')
        .send({title: "A Test Book"})
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.body.title, "A Test Book", "The book should have the new title");
          assert.property(res.body, '_id', "New book should have an _id");
          test_id = res.body._id;
          done();
        });
      });
      
      test('Test POST /api/books with no title given', function(done) {
        chai.request(server)
        .post('/api/books')
        .send({})
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, "missing required field title", "Should respond back title is missing");
          done();
        });
      });
      
    });


    suite('GET /api/books => array of books', function(){
      
      test('Test GET /api/books',  function(done){
        chai.request(server)
        .get('/api/books')
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.isArray(res.body, "Retunred item should be an array");
          assert.equal(res.body[res.body.length - 1]._id, test_id, "The last book in the array should have the id of test book added");
          assert.equal(res.body[res.body.length - 1].title, "A Test Book", "The last book in the array should have title of the test book added");
          assert.equal(res.body[res.body.length-1].commentcount, 0, "The last book added should have no comments");
          done();
        });
      });      
      
    });


    suite('GET /api/books/[id] => book object with [id]', function(){
      
      test('Test GET /api/books/[id] with id not in db',  function(done){
        chai.request(server)
        .get('/api/books/InvalidID')
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, "no book exists", "Should respond with this error string if no book found");
          done();
        });
      });
      
      test('Test GET /api/books/[id] with valid id in db',  function(done){
        chai.request(server)
        .get('/api/books/' + test_id)
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.body._id, test_id, "The book returned should be the test book");
          assert.equal(res.body.title, "A Test Book", "The book returned should have the test book title");
          assert.isArray(res.body.comments, "The book should have a comments array, it would be empty");
          done();
        });
      });
      
    });


    suite('POST /api/books/[id] => add comment/expect book object with id', function(){
      
      test('Test POST /api/books/[id] with comment', function(done){
        chai.request(server)
        .post('/api/books/' + test_id)
        .send({comment: "A test comment"})
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.body._id, test_id, "The book returned should be the test book");
          assert.equal(res.body.title, "A Test Book", "The book returned should have the test book title");
          assert.equal(res.body.comments[0], "A test comment", "The book should have the test comment as first array element");
          done();
        });
      });

      test('Test POST /api/books/[id] without comment field', function(done){
        chai.request(server)
        .post('/api/books/' + test_id)
        .send({})
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, "missing required field comment", "Should respond with missing comment error message");
          done();
        });
      });

      test('Test POST /api/books/[id] with comment, id not in db', function(done){
        chai.request(server)
        .post('/api/books/InvalidID')
        .send({comment: "A test comment"})
        .end(function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, "no book exists", "Should respond with can't find book error message");
          done();
        });
      });
      
    });

    suite('DELETE /api/books/[id] => delete book object id', function() {

      test('Test DELETE /api/books/[id] with valid id in db', function(done){
        chai.request(server)
        .delete('/api/books/' + test_id)
        .end(function(err,res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, "delete successful");
          done();
        });
      });

      test('Test DELETE /api/books/[id] with  id not in db', function(done){
        chai.request(server)
        .delete('/api/books/123456')
        .end(function(err,res) {
          assert.equal(res.status, 200);
          assert.equal(res.text, "no book exists");
          done();
        });
      });

    });

  });

});



--------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------


